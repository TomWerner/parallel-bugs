\documentclass{beamer}
\usepackage{natbib}

\title{Distributing OpenBUGs chains in parallel}
\author{Tom Werner \\ Chris Chekal}
\institute{Department of Computer Science\\The University of Iowa\\Iowa City, IA}


\begin{document}
\SweaveOpts{concordance=TRUE}

\begin{frame}
 \titlepage
\end{frame}

\begin{frame}
  \frametitle{What is OpenBUGs?}

  \begin{itemize}
   \item Software for \textbf{B}ayesian inference \textbf{U}sing  \textbf{G}ibbs \textbf{S}ampling
   \item Uses Monte Carlo Markov Chains (MCMC) to model posterior distributions
  \end{itemize}
\end{frame}

\begin{frame}
  \frametitle{Why use OpenBUGs?}
  
  \begin{itemize}
    \item Free and open source software
    \item Integrates with R through R2OpenBugs/Coda packages
    \item Used in Bayesian analysis class at Iowa
  \end{itemize}
\end{frame}

\begin{frame}
  \frametitle{What is being parallelized?}
  
  \begin{itemize}
    \item Using MCMC requires drawing many samples from a converged chain
    \item Determining convergence is easier with multiple chains
    \item If chains converge to different spots, something is wrong
    \item Each chain is independent of the others, allowing for naive parallelization
    \item Just need to make sure they're seeded independently
  \end{itemize}
\end{frame}

\begin{frame}
  \frametitle{Easy cluster/CPU parallization in R}
  
  \begin{itemize}
    \item We used the Snow and Snowfall packages
    \item They let you easily set up a cluster to run R code on
    \item sfLapply works like regular apply, but distributes it over the cluster
  \end{itemize}
\end{frame}

\begin{frame}
  \frametitle{Snow/Snowfall Example}
  
  \begin{itemize}
  \item
    data = matrix(rnorm(1000 * 1000), ncol=100)
    
    library(snow)\\
    library(snowfall)\\
    sfInit(parallel=TRUE, cpus=4)\\
    print(system.time(sfLapply(data, mean)))\\
    sfStop()\\
    sfInit(parallel=TRUE, cpus=1)\\
    print(system.time(sfLapply(data, mean)))\\
    sfStop()
    \item Parallel: 2.61 seconds
    \item Sequential: 6.26 seconds
  \end{itemize}
\end{frame}

\begin{frame}
  \frametitle{Parallel Bugs workflow}
  
  \begin{enumerate}
    \item Define openbugs model as a string, data as an R list, and inits as a list
    \item Call parallelBugs with these arguments, and the IP addresses of cluster machines
    \item Use Coda or other R packages for analyzing MCMC output
  \end{enumerate}
\end{frame}


\begin{frame}[fragile]
  \frametitle{Parallel Bugs workflow}
  
  \begin{enumerate}
    \item Define openbugs model as a string, data as an R list, and inits as a list
  \end{enumerate}

  \begin{verbatim}
model.str = "model
{
  tau ~ dgamma(0.0001, 0.0001)
  mu ~ dflat()
  sigma <- 1 / sqrt(tau)

  for(i in 1:N)
  {
    x.data[i]~dnorm(mu, tau)
  }
}"
  \end{verbatim}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Parallel Bugs workflow}
  
  \begin{enumerate}
    \item Define openbugs model as a string, data as an R list, and inits as a list
  \end{enumerate}

  \begin{verbatim}
# Simulated normal dataset
bugs.data = list(x.data=rnorm(1000, 12, 5), N=1000)

# Initial values of parameters. Note that you can use
# R random number functions here
init.list = list(
  chain1=list(mu=runif(1, -50, 50), tau=1),
  chain2=list(mu=-50, tau=10),
  chain3=list(mu=50, tau=.1)
)

# Parameters to collect statistics on
params <- c("mu", "sigma")
  \end{verbatim}
\end{frame}


\begin{frame}[fragile]
  \frametitle{Does it help?}
  
  \begin{enumerate}
    \item Parallel time for 100,000 iterations, 3 chains: 60 seconds
    \item Sequential time: 115 seconds
  \end{enumerate}

  \begin{verbatim}
system.time(bugs(data=bugs.data, inits=init.list, 
                 parameters.to.save=params, n.iter=100000, 
                 n.chains=3, n.burnin=1000, n.thin=1,
                 model.file="model.txt", debug=FALSE, 
                 codaPkg=TRUE, OpenBUGS.pgm=OpenBUGS.exe,
                 working.directory=folder,
                 bugs.seed=as.integer(runif(1, 1, 14))))
   user  system elapsed 
   0.17    0.03   60.69
system.time(parallel.bugs('localhost', 3, model.str, 
                          bugs.data, 3, init.list, params, 
                          OpenBUGS.exe, n.iter=100000))
   user  system elapsed 
   0.42    0.00  115.22 
  \end{verbatim}
\end{frame}

\begin{frame}
\frametitle{Why Create an R Package?}
\begin{itemize}
    \item Functions that you write and use often can be easily loaded and used on your local machine 
    \item Can be uploaded to CRAN, allowing other R users to utilize the functions you wrote 
    \item Provides documentation, making your code easily understandable for other users
\end{itemize}
\end{frame}

\begin{frame}
\frametitle{How to Create an R Package?}
Packages that you will first need to download:
\begin{itemize}
    \item devtools \\
        \texttt{install.packages("devtools")}
    \item roxygen2 \\
        \texttt{devtools::install\_github(klutometis/roxygen)}
\end{itemize}
\end{frame}

\begin{frame}
\frametitle{Creating Your Package Directory}
\begin{itemize}
    \item Navigate to your desired parent directory
    \item Create the R package \\
        \texttt{create("packagename")}
    \item The package you created will include:
    \begin{itemize}
        \item Description document
        \item man folder
        \item R folder
    \end{itemize}
\end{itemize}
\end{frame}

\begin{frame}
\frametitle{Adding Functions to R Package}
\begin{itemize}
    \item Write your R function(s) and save them in to a .R file
    \item If you have multiple functions, you can either save them in multiple .R files or write them sequentially in one .R file
    \item Copy your .R file(s) to the R folder
\end{itemize}
\end{frame}

\begin{frame}
\frametitle{Install Your New R Package!}
\begin{itemize}
    \item Make sure to navigate back to the parent directory
    \item Install package \\ 
        \texttt{install("packagename")}
    \item Your R package is now ready to use!
\end{itemize}
\end{frame}

\begin{frame}
  \frametitle{References}
    \begin{itemize}
      \item Luke Tierney, A. J. Rossini, Na Li and H. Sevcikova (2016). snow: Simple Network of Workstations. R package version 0.4-2. https://CRAN.R-project.org/package=snow
      \item Jochen Knaus (2015). snowfall: Easier cluster computing (based on snow).. R package version 1.84-6.1. https://CRAN.R-project.org/package=snowfall
      \item Martyn Plummer, Nicky Best, Kate Cowles and Karen Vines (2006). CODA: Convergence Diagnosis and Output Analysis for MCMC, R News, vol 6, 7-11
    \end{itemize}
\end{frame}
\end{document}